import React, { useState, useRef, useEffect } from "react";
import {
	Send,
	User,
	Bot,
	Paperclip,
	Smile,
	Maximize2,
	Minimize2,
	Sun, // Import Sun icon for general expert
	ChevronDown, // Import ChevronDown icon for scroll button
} from "lucide-react";
import { ExpertType } from "../pages/ChatPage"; // Import the type

interface Message {
	text: string;
	sender: "user" | "assistant";
	timestamp: Date;
}

interface ChatInterfaceProps {
	expertType: ExpertType; // Add expertType prop
	selectedQuestion: string | null;
	clearSelectedQuestion: () => void;
}

const ChatInterface: React.FC<ChatInterfaceProps> = ({
	expertType, // Destructure expertType
	selectedQuestion,
	clearSelectedQuestion,
}) => {
	const [messages, setMessages] = useState<Message[]>([
		{
			text: "Hello! I'm your Solar Subsidies Expert. How can I help you today with information about solar subsidies in India?",
			sender: "assistant",
			timestamp: new Date(),
		},
	]);
	const [inputMessage, setInputMessage] = useState("");
	const [isLoading, setIsLoading] = useState(false);
	const [isFullScreen, setIsFullScreen] = useState(false);
	const [showScrollButton, setShowScrollButton] = useState(false); // State for scroll button visibility
	const messagesEndRef = useRef<HTMLDivElement>(null);
	const inputRef = useRef<HTMLInputElement>(null);
	const chatContainerRef = useRef<HTMLDivElement>(null);

	// Sample responses about solar subsidies in India
	const subsidyResponses = {
		general:
			"In India, residential solar installations can get subsidies under the PM-KUSUM scheme and Rooftop Solar Programme Phase-II. The subsidy amount varies from 20% to 40% of the installation cost depending on system capacity and your state.",
		state:
			"Different states offer different subsidy amounts. For example, Gujarat offers 40% subsidy for systems up to 3kW, while Maharashtra offers up to 30% for residential installations.",
		application:
			"To apply for solar subsidies, you need to submit an application to your state nodal agency or electricity distribution company (DISCOM). Required documents include proof of ownership, electricity bill, and ID proof.",
		eligibility:
			"Generally, any residential consumer with a valid electricity connection is eligible for solar subsidies. The system size should typically match your sanctioned load.",
		commercial:
			"For commercial installations, the subsidy structure differs from residential. MSME units can get subsidies up to 15-20% in most states.",
		amount:
			"For residential installations, subsidies range from ₹14,588 per kW for systems up to 3 kW, and ₹7,294 per kW for systems between 3-10 kW.",
		timeline:
			"Once approved, subsidy amounts are typically disbursed within 30-90 days after successful installation and inspection of the solar system.",
		schemes:
			"Current active schemes include PM-KUSUM (for farmers), Grid-connected Rooftop Solar Programme Phase-II, and various state-specific schemes.",
		process:
			"The process involves: 1) Application to DISCOM, 2) Technical feasibility approval, 3) Installation, 4) Inspection, 5) Subsidy disbursement to your bank account.",
	};

	const generalSolarResponses = {
		how_work:
			"Solar panels work by converting sunlight into electricity using photovoltaic cells. This electricity can be used to power your home or business.",
		benefits:
			"Solar energy is renewable, reduces electricity bills, and is environmentally friendly. It also increases property value.",
		space:
			"You need sufficient roof or ground space to install solar panels. The area required depends on the system size.",
		net_metering:
			"Net metering allows you to send excess electricity generated by your solar panels back to the grid and receive credits on your electricity bill.",
		lifespan:
			"Solar panels typically last 25-30 years with warranties covering performance degradation over time.",
		maintenance:
			"Solar panels require minimal maintenance, mainly cleaning to remove dust and debris for optimal performance.",
		default:
			"Solar energy is a clean and sustainable way to generate electricity. Feel free to ask more specific questions!",
	};

	// Update initial message when expertType changes
	useEffect(() => {
		setMessages([
			{
				text:
					expertType === "subsidy"
						? "Hello! I'm your Solar Subsidies Expert. How can I help you today with information about solar subsidies in India?"
						: "Hello! I'm your General Solar Expert. How can I assist you today with information about solar energy?",
				sender: "assistant",
				timestamp: new Date(),
			},
		]);
	}, [expertType]);

	// Process selected question from parent component
	useEffect(() => {
		if (selectedQuestion) {
			setInputMessage(selectedQuestion);
			// Auto-send the question after a brief delay
			const timer = setTimeout(() => {
				handleSendMessage(new Event("submit") as any);
				clearSelectedQuestion();
			}, 100);
			return () => clearTimeout(timer);
		}
	}, [selectedQuestion]);

	// Handle full screen mode
	useEffect(() => {
		const handleEscKey = (event: KeyboardEvent) => {
			if (event.key === "Escape" && isFullScreen) {
				setIsFullScreen(false);
			}
		};

		if (isFullScreen) {
			// Only prevent scrolling on the body
			document.body.style.overflow = "hidden";
			window.addEventListener("keydown", handleEscKey);
		} else {
			document.body.style.overflow = "";
		}

		return () => {
			document.body.style.overflow = "";
			window.removeEventListener("keydown", handleEscKey);
		};
	}, [isFullScreen]);

	// Auto-scroll when in fullscreen
	useEffect(() => {
		if (isFullScreen) {
			messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
		}
	}, [messages, isFullScreen]);

	// Track scroll position to toggle button
	useEffect(() => {
		const el = chatContainerRef.current;
		if (!el) return;
		const onScroll = () => {
			const atBottom = el.scrollHeight - el.scrollTop <= el.clientHeight + 20;
			setShowScrollButton(!atBottom);
		};
		el.addEventListener("scroll", onScroll);
		return () => el.removeEventListener("scroll", onScroll);
	}, []);

	// Simulate AI response based on expert type
	const generateResponse = (query: string, type: ExpertType): string => {
		const queryLower = query.toLowerCase();

		if (type === "subsidy") {
			if (
				queryLower.includes("state") ||
				queryLower.includes("gujarat") ||
				queryLower.includes("maharashtra")
			) {
				return subsidyResponses.state;
			} else if (
				queryLower.includes("apply") ||
				queryLower.includes("application") ||
				queryLower.includes("how to get") ||
				queryLower.includes("document")
			) {
				return subsidyResponses.application;
			} else if (
				queryLower.includes("eligible") ||
				queryLower.includes("eligibility") ||
				queryLower.includes("qualify")
			) {
				return subsidyResponses.eligibility;
			} else if (
				queryLower.includes("commercial") ||
				queryLower.includes("business") ||
				queryLower.includes("company")
			) {
				return subsidyResponses.commercial;
			} else if (
				queryLower.includes("amount") ||
				queryLower.includes("how much") ||
				queryLower.includes("money") ||
				queryLower.includes("subsidy can i get")
			) {
				return subsidyResponses.amount;
			} else if (
				queryLower.includes("time") ||
				queryLower.includes("when") ||
				queryLower.includes("timeline") ||
				queryLower.includes("how long")
			) {
				return subsidyResponses.timeline;
			} else if (
				queryLower.includes("scheme") ||
				queryLower.includes("program") ||
				queryLower.includes("initiative") ||
				queryLower.includes("pm-kusum")
			) {
				return subsidyResponses.schemes;
			} else if (
				queryLower.includes("process") ||
				queryLower.includes("step") ||
				queryLower.includes("procedure")
			) {
				return subsidyResponses.process;
			} else {
				return subsidyResponses.general;
			}
		} else {
			if (queryLower.includes("how") && queryLower.includes("work")) {
				return generalSolarResponses.how_work;
			} else if (
				queryLower.includes("benefit") ||
				queryLower.includes("advantage")
			) {
				return generalSolarResponses.benefits;
			} else if (
				queryLower.includes("space") ||
				queryLower.includes("area") ||
				queryLower.includes("roof")
			) {
				return generalSolarResponses.space;
			} else if (
				queryLower.includes("net metering") ||
				queryLower.includes("billing")
			) {
				return generalSolarResponses.net_metering;
			} else if (
				queryLower.includes("last") ||
				queryLower.includes("lifespan") ||
				queryLower.includes("warranty")
			) {
				return generalSolarResponses.lifespan;
			} else if (
				queryLower.includes("maintain") ||
				queryLower.includes("maintenance") ||
				queryLower.includes("clean")
			) {
				return generalSolarResponses.maintenance;
			} else {
				return generalSolarResponses.default;
			}
		}
	};

	const handleSendMessage = async (e: React.FormEvent) => {
		e.preventDefault();

		if (!inputMessage.trim()) return;

		// Add user message
		const userMessage: Message = {
			text: inputMessage,
			sender: "user",
			timestamp: new Date(),
		};

		setMessages([...messages, userMessage]);
		setInputMessage("");
		setIsLoading(true);

		// Simulate delay for "typing"
		setTimeout(() => {
			const responseText = generateResponse(userMessage.text, expertType);

			const assistantMessage: Message = {
				text: responseText,
				sender: "assistant",
				timestamp: new Date(),
			};

			setMessages((prevMessages) => [...prevMessages, assistantMessage]);
			setIsLoading(false);

			// Focus the input after receiving response
			if (inputRef.current) {
				inputRef.current.focus();
			}
		}, 1000);
	};

	const toggleFullScreen = () => {
		setIsFullScreen(!isFullScreen);
	};

	// Determine styles based on expertType and theme
	const isSubsidyExpert = expertType === "subsidy";
	const headerGradient = isSubsidyExpert
		? "from-blue-600 to-indigo-600"
		: "from-amber-600 to-yellow-600"; // Amber/Yellow gradient
	const expertTitle = isSubsidyExpert
		? "Solar Subsidy Expert"
		: "General Solar Expert";
	const expertDescription = isSubsidyExpert
		? "Ask me anything about solar subsidies in India"
		: "Ask me anything about solar energy";
	const expertIcon = isSubsidyExpert ? (
		<Bot className="h-6 w-6 mr-2" />
	) : (
		<Sun className="h-6 w-6 mr-2" />
	); // Sun icon for general
	const inputPlaceholder = isSubsidyExpert
		? "Ask about solar subsidies in your state..."
		: "Ask about how solar panels work, benefits, etc...";
	const assistantIconBg = isSubsidyExpert
		? "bg-blue-100 dark:bg-blue-900"
		: "bg-amber-100 dark:bg-amber-900"; // Amber background
	const assistantIconColor = isSubsidyExpert
		? "text-blue-600 dark:text-blue-300"
		: "text-amber-600 dark:text-amber-300"; // Amber icon color
	const loadingColor = isSubsidyExpert
		? "bg-blue-400 dark:bg-blue-500"
		: "bg-amber-400 dark:bg-amber-500"; // Amber loading dots
	const sendButtonGradient = isSubsidyExpert
		? "from-blue-600 to-indigo-600"
		: "from-amber-600 to-yellow-600"; // Amber/Yellow send button

	return (
		<div
			className={`flex flex-col ${
				isFullScreen
					? // removed pt-16, increased bottom padding
					  "fixed inset-0 z-50 h-screen max-h-screen pb-24 sm:pb-0"
					: "h-[500px] sm:h-[600px] max-w-4xl mx-auto"
			} 
				rounded-lg sm:rounded-xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700 bg-white dark:bg-gray-800 transition-all duration-300`}
			style={{ isolation: "isolate" }}
		>
			<div
				// Adjusted padding for mobile
				className={`bg-gradient-to-r ${headerGradient} p-3 sm:p-4 text-white flex justify-between items-center`}
			>
				<div>
					{/* Adjusted text size for mobile */}
					<h2 className="text-lg sm:text-xl font-semibold flex items-center">
						{expertIcon} {expertTitle}
					</h2>
					{/* Adjusted text size for mobile */}
					<p className="text-xs sm:text-sm opacity-90">{expertDescription}</p>
				</div>
				<button
					onClick={toggleFullScreen}
					// Adjusted padding for mobile
					className="p-1.5 sm:p-2 rounded-full hover:bg-white/10 transition-colors"
					aria-label={isFullScreen ? "Exit full screen" : "Enter full screen"}
				>
					{isFullScreen ? (
						// Adjusted icon size slightly for mobile if needed
						<Minimize2 className="h-4 w-4 sm:h-5 sm:w-5 text-white" />
					) : (
						<Maximize2 className="h-4 w-4 sm:h-5 sm:w-5 text-white" />
					)}
				</button>
			</div>

			<div
				ref={chatContainerRef}
				// Adjusted padding for mobile
				className="flex-1 p-3 sm:p-4 overflow-y-auto bg-gray-50 dark:bg-gray-900 relative scroll-smooth"
				style={{
					// ...existing background style...
					backgroundImage:
						'url(\'data:image/svg+xml,%3Csvg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="%23e5e7eb" fill-opacity="0.1" fill-rule="evenodd"%3E%3Ccircle cx="3" cy="3" r="3"/%3E%3Ccircle cx="13" cy="13" r="3"/%3E%3C/g%3E%3C/svg%3E\')',
					// Adjusted height calculation based on new default height
					height: isFullScreen
						? "calc(100vh - 110px - 4rem)" // Adjusted based on header/footer padding
						: "calc(500px - 110px)", // Adjusted based on header/footer padding
					overflowY: "auto",
					overscrollBehavior: "contain",
				}}
			>
				{messages.map((message, index) => (
					<div
						key={index}
						className={`mb-3 sm:mb-4 flex ${
							// Adjusted margin bottom
							message.sender === "user" ? "justify-end" : "justify-start"
						}`}
					>
						<div
							// Adjusted padding and max-width for mobile
							className={`p-2.5 sm:p-3.5 rounded-xl sm:rounded-2xl max-w-[85%] sm:max-w-xs md:max-w-md lg:max-w-lg ${
								message.sender === "user"
									? "bg-gradient-to-br from-blue-600 to-indigo-600 text-white rounded-br-none shadow-md"
									: "bg-white dark:bg-gray-700 border border-gray-100 dark:border-gray-600 rounded-bl-none shadow-md"
							}`}
						>
							<div className="flex items-center mb-1">
								{message.sender === "assistant" ? (
									// Adjusted icon size container for mobile
									<div
										className={`w-5 h-5 sm:w-6 sm:h-6 rounded-full ${assistantIconBg} flex items-center justify-center mr-1 sm:mr-0`}
									>
										{isSubsidyExpert ? (
											// Adjusted icon size
											<Bot
												className={`h-3 w-3 sm:h-3.5 sm:w-3.5 ${assistantIconColor}`}
											/>
										) : (
											<Sun
												className={`h-3 w-3 sm:h-3.5 sm:w-3.5 ${assistantIconColor}`}
											/>
										)}
									</div>
								) : (
									// Adjusted icon size container for mobile
									<div className="w-5 h-5 sm:w-6 sm:h-6 rounded-full bg-blue-200 dark:bg-blue-800 flex items-center justify-center mr-1 sm:mr-0">
										{/* Adjusted icon size */}
										<User className="h-3 w-3 sm:h-3.5 sm:w-3.5 text-blue-700 dark:text-blue-300" />
									</div>
								)}
								{/* Adjusted text size and margin */}
								<span
									className={`text-[11px] sm:text-xs ml-1 sm:ml-1.5 ${
										message.sender === "user"
											? "text-blue-100"
											: "text-gray-500 dark:text-gray-400"
									}`}
								>
									{message.sender === "user" ? "You" : expertTitle} •{" "}
									{message.timestamp.toLocaleTimeString([], {
										hour: "2-digit",
										minute: "2-digit",
									})}
								</span>
							</div>
							{/* Adjusted text size */}
							<p
								className={`text-xs sm:text-sm whitespace-pre-wrap ${
									message.sender === "user"
										? "text-white"
										: "text-gray-800 dark:text-gray-100"
								}`}
							>
								{message.text}
							</p>
						</div>
					</div>
				))}
				{isLoading && (
					// ... loading indicator (adjust padding if needed) ...
					<div className="flex justify-start mb-3 sm:mb-4">
						<div className="bg-white dark:bg-gray-700 border border-gray-100 dark:border-gray-600 p-3 sm:p-4 rounded-xl sm:rounded-2xl rounded-bl-none shadow-md">
							<div className="flex space-x-1.5 sm:space-x-2">
								<div
									className={`w-2 h-2 sm:w-2.5 sm:h-2.5 rounded-full ${loadingColor} animate-bounce`}
									style={{ animationDelay: "0ms" }}
								></div>
								<div
									className={`w-2 h-2 sm:w-2.5 sm:h-2.5 rounded-full ${loadingColor} animate-bounce`}
									style={{ animationDelay: "300ms" }}
								></div>
								<div
									className={`w-2 h-2 sm:w-2.5 sm:h-2.5 rounded-full ${loadingColor} animate-bounce`}
									style={{ animationDelay: "600ms" }}
								></div>
							</div>
						</div>
					</div>
				)}
				<div ref={messagesEndRef} />
				{/* Scroll to bottom button */}
				{!isFullScreen && showScrollButton && (
					<button
						onClick={() =>
							messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
						}
						className="absolute bottom-4 right-4 bg-white dark:bg-gray-700 p-2 rounded-full shadow-md"
						aria-label="Scroll to bottom"
					>
						<ChevronDown className="h-5 w-5 text-gray-600 dark:text-gray-300" />
					</button>
				)}
			</div>

			<form
				onSubmit={handleSendMessage}
				className="border-t border-gray-100 dark:border-gray-700 p-2 sm:p-3 bg-white dark:bg-gray-800 sticky bottom-0"
			>
				{/* Adjusted padding/spacing for mobile */}
				<div className="flex items-center space-x-1.5 sm:space-x-2 bg-gray-50 dark:bg-gray-700 rounded-full px-2 sm:px-3 py-1 border border-gray-200 dark:border-gray-600 hover:border-blue-300 dark:hover:border-blue-500 focus-within:border-blue-400 dark:focus-within:border-blue-500 transition-colors">
					<button
						type="button"
						className="text-gray-400 dark:text-gray-500 hover:text-blue-500 dark:hover:text-blue-400 transition-colors p-1.5 sm:p-2"
					>
						<Smile className="h-4 w-4 sm:h-5 sm:w-5" />
					</button>
					<input
						ref={inputRef}
						type="text"
						value={inputMessage}
						onChange={(e) => setInputMessage(e.target.value)}
						placeholder={inputPlaceholder}
						className="flex-1 py-2 sm:py-2.5 bg-transparent border-none focus:outline-none text-sm sm:text-base text-gray-800 dark:text-gray-100 placeholder:text-sm placeholder-gray-500 dark:placeholder-gray-400"
					/>
					<button
						type="button"
						className="text-gray-400 dark:text-gray-500 hover:text-blue-500 dark:hover:text-blue-400 transition-colors p-1.5 sm:p-2"
					>
						<Paperclip className="h-4 w-4 sm:h-5 sm:w-5" />
					</button>
					<button
						type="submit"
						disabled={!inputMessage.trim() || isLoading}
						className={`bg-gradient-to-r ${sendButtonGradient} text-white rounded-full w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center disabled:opacity-50 transition-all hover:shadow-md flex-shrink-0`}
					>
						<Send className="h-4 w-4 sm:h-5 sm:w-5" />
					</button>
				</div>
			</form>
		</div>
	);
};

export default ChatInterface;
